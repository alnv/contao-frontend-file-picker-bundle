<script>
    Dropzone.autoDiscover = false;
    Dropzone.prototype.defaultOptions.dictDefaultMessage = '<?= $GLOBALS["TL_LANG"]["MSC"]["dictDefaultMessage"] ?>';
    Dropzone.prototype.defaultOptions.dictFallbackMessage = '<?= $GLOBALS["TL_LANG"]["MSC"]["dictFallbackMessage"] ?>';
    Dropzone.prototype.defaultOptions.dictFallbackText ='<?= $GLOBALS["TL_LANG"]["MSC"]["dictFallbackText"] ?>';
    Dropzone.prototype.defaultOptions.dictFileTooBig = '<?= $GLOBALS["TL_LANG"]["MSC"]["dictFileTooBig"] ?>';
    Dropzone.prototype.defaultOptions.dictInvalidFileType = '<?= $GLOBALS["TL_LANG"]["MSC"]["dictInvalidFileType"] ?>';
    Dropzone.prototype.defaultOptions.dictResponseError = '<?= $GLOBALS["TL_LANG"]["MSC"]["dictResponseError"] ?>';
    Dropzone.prototype.defaultOptions.dictCancelUpload = '<?= $GLOBALS["TL_LANG"]["MSC"]["dictCancelUpload"] ?>';
    Dropzone.prototype.defaultOptions.dictCancelUploadConfirmation = '<?= $GLOBALS["TL_LANG"]["MSC"]["dictCancelUploadConfirmation"] ?>';
    Dropzone.prototype.defaultOptions.dictRemoveFile = '<?= $GLOBALS["TL_LANG"]["MSC"]["dictRemoveFile"] ?>';
    Dropzone.prototype.defaultOptions.dictMaxFilesExceeded = '<?= $GLOBALS["TL_LANG"]["MSC"]["dictMaxFilesExceeded"] ?>';
</script>
<div id="fp-<?= $this->id ?>" class="fp-container" ref="filePicker">
    <input type="hidden" name="<?= $this->name ?>" :value="JSON.stringify(values)">
    <draggable v-model="selections" @start="drag=true" @end="drag=false" class="fp-selection" :options="{handle:'.fp-drag'}">
        <div v-for="(file, index) in selections" :key="file.uuid" class="fp-file">
            <img v-if="file.thumb" :src="file.thumb" :alt="file.name" class="fp-thumb fp-drag">
            <span v-else><img v-if="file.icon" :src="file.icon" :alt="file.name" class="fp-icon fp-drag"><span class="fp-name">{{ file.name }} ({{ file.filesize }})</span></span>
            <button class="fb-delete-file fp-button" @click="deleteFile(file, true, event)"><span><?= $GLOBALS['TL_LANG']['MSC']['filePickerRemoveFile'] ?></span></button>
        </div>
        <div class="fp-loader" v-if="loader"><img src="/system/themes/flexible/icons/loading.svg" alt=""></div>
    </draggable>
    <?php if (!$this->selectionView): ?>
    <div class="fp-button">
        <button @click="openPicker" class="fb-select-files fp-button"><span><?= $GLOBALS['TL_LANG']['MSC']['filePickerSelectButton'] ?></span></button>
    </div>
    <div class="fp-modal" v-show="modal">
        <div class="fp-files-container">
            <button class="fp-button fb-close-modal" @click="openPicker"><span><?= $GLOBALS['TL_LANG']['MSC']['filePickerCloseModal'] ?></span></button>
            <div class="fp-files">
                <div v-for="(file, index) in data" class="fp-file">
                    <template v-if="!maxSize || (maxSize > selections.length || isSelected(file.uuid))">
                    <span v-if="multiple" class="checkbox"><input type="checkbox" :id="'id_file_<?= $this->id ?>_'+index" :value="file.uuid" v-model="values"><label :for="'id_file_<?= $this->id ?>_'+index"><?= $GLOBALS['TL_LANG']['MSC']['filePickerInputLabel'] ?></label></span>
                    <span v-if="!multiple" class="radio"><input type="radio" :id="'id_file_<?= $this->id ?>_'+index" :value="file.uuid" v-model="values[0]"><label :for="'id_file_<?= $this->id ?>_'+index"><?= $GLOBALS['TL_LANG']['MSC']['filePickerInputLabel'] ?></label></span>
                    </template>
                    <label :for="'id_file_<?= $this->id ?>_'+index">
                        <img v-if="file.thumb" :src="file.thumb" :alt="file.name" class="fp-thumb">
                        <span v-else><img v-if="file.icon" :src="file.icon" :alt="file.name" class="fp-icon"><span class="fp-name">{{ file.name }} ({{ file.filesize }})</span></span>
                    </label>
                    <button v-if="buttons.includes('delete')" class="fb-delete-file fp-button" @click="deleteFile(file, false, event)"><span><?= $GLOBALS['TL_LANG']['MSC']['filePickerDeleteFile'] ?></span></button>

                </div>
            </div>
        </div>
    </div>
    <?php endif; ?>
    <div class="fp-dropzone">
        <div class="dropzone"><div class="dz-message"><?= $GLOBALS["TL_LANG"]["MSC"]["dropzoneDzMessage"] ?></div></div>
        <p class="error" v-if="uploadError">{{ uploadError }}</p>
    </div>
</div>
<script>
    (function () {
        let objState = {
            modal: false,
            loader: false,
            dropzone: null,
            uploadError: '',
            maxSize: <?= $this->maxSize ?>,
            blockFetchSections: false,
            buttons: <?= json_encode(($this->buttons ?: [])) ?>,
            multiple: <?= $this->multiple ? 'true' : 'false' ?>,
            data: <?= json_encode(($this->data?:[]), JSON_FORCE_OBJECT, 16) ?>,
            values: <?= json_encode($this->values) ?>,
            selections: <?= json_encode(($this->selections?:[])) ?>
        };
        new Vue({
            el: "#fp-<?= $this->id ?>",
            data: function () {
                return objState
            },
            methods: {
                openPicker: function (e) {
                    e.preventDefault();
                    this.modal = !this.modal;
                },
                deleteFile: function (file, soft, e) {
                    e.preventDefault();
                    this.values.splice(this.values.indexOf(file.uuid), 1);
                    if (soft) {
                        this.fetchSelections();
                        return null;
                    }
                    this.$http.post('/file-picker/delete',
                        {
                            uuid: file.uuid
                        },
                        {
                            emulateJSON: true,
                            'Content-Type': 'application/x-www-form-urlencoded'
                        }
                    ).then(function() {
                        this.fetchData();
                        this.fetchSelections();
                    }.bind(this));
                },
                isSelected: function (uuid) {
                    for (let i=0;i<this.selections.length;i++) {
                        if (this.selections[i]['uuid'] === uuid) {
                            return true;
                        }
                    }
                    return false;
                },
                setDropzone: function () {
                    if (typeof Dropzone === 'undefined') {
                        return null;
                    }
                    Dropzone.autoDiscover = false;
                    let objDropzoneOptions = {
                        url: '/file-picker/upload',
                        paramName: '<?= $this->name ?>',
                        <?php if (!empty($this->extensions)): ?>
                        acceptedFiles: "<?= (new \Alnv\ContaoFrontendFilePickerBundle\Hooks\Fields())->convertExtensions($this->extensions)  ?>",
                        <?php endif; ?>
                        parallelUploads: 1,
                        <?php if ($strSize =\Config::get('maxFileSize')): ?>
                        maxFilesize: <?= ((int) $strSize / 1000) ?>,
                        <?php endif; ?>
                        timeout: 0,
                        params: {
                            cid: "<?= $this->fieldId?:'' ?>",
                            name: "<?= $this->name?:'' ?>"
                        }
                    };
                    let self = this;
                    this.dropzone = new Dropzone(this.$el.querySelector('.dropzone'), objDropzoneOptions);
                    this.dropzone.on('complete', function (file) {
                        if (!file.xhr) {
                            return null;
                        }
                        let objResponse = JSON.parse(file.xhr.response);
                        if (!objResponse.success) {
                            this.error = objResponse.error;
                        } else {
                            objState.dropzone.removeFile(file);
                            self.fetchData();
                            if (objResponse.file.uuid) {
                                self.addUploadToValues(objResponse.file.uuid)
                            }
                        }
                    });
                },
                addUploadToValues: function (uuid) {
                    if (this.multiple) {
                        this.values.push(uuid);
                    } else {
                        this.values = [uuid];
                    }
                },
                fetchSelections: function () {
                    if (this.blockFetchSections) {
                        return null;
                    }
                    this.loader = true;
                    this.$http.post('/file-picker/fetch-selections',
                        {
                            values: this.values,
                            cid: "<?= $this->fieldId?:'' ?>",
                            name: "<?= $this->name?:'' ?>"
                        },
                        {
                            emulateJSON: true,
                            'Content-Type': 'application/x-www-form-urlencoded'
                        }
                    ).then(function(res) {
                        this.selections = res.body;
                        this.loader = false;
                    }.bind(this));
                },
                fetchData: function () {
                    this.$http.post('/file-picker/fetch-data',
                        {
                            cid: "<?= $this->fieldId?:'' ?>",
                            name: "<?= $this->name?:'' ?>"
                        },
                        {
                            emulateJSON: true,
                            'Content-Type': 'application/x-www-form-urlencoded'
                        }
                    ).then(function(res) {
                        this.data = res.body;
                    }.bind(this));
                }
            },
            watch: {
                selections: {
                    handler: function () {
                        this.blockFetchSections = true;
                        this.loader = true;
                        this.values = [];
                        for (let i=0;i<this.selections.length;i++) {
                            this.values.push(this.selections[i]['uuid']);
                        }
                        setTimeout(function () {
                            this.loader = false;
                            this.blockFetchSections = false;
                        }.bind(this), 250)
                    },
                    deep: true
                },
                values: {
                    handler: function () {
                        this.fetchSelections();
                    },
                    deep: true
                }
            },
            mounted: function () {
                this.setDropzone();
                <?php if (!$this->selectionView): ?>
                this.$refs['filePicker'].querySelector('.fp-modal').addEventListener('click', function() {
                    objState.modal = false;
                });
                this.$refs['filePicker'].querySelector('.fp-files-container').addEventListener('click', function(e) {
                    e.stopPropagation();
                });
                setInterval(function () {
                    this.fetchData();
                }.bind(this), 10000);
                <?php endif; ?>
            }
        })
    })();
</script>